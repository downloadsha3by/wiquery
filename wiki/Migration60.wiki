= Migration to WiQuery 6.0.0 =

Migrating to WiQuery 6.0.0 has never been easier. Most of the core functionality from WiQuery 1.5 has been made superfluous because of the new resource management in Wicket 6.0.0. It is recommended you read [https://cwiki.apache.org/WICKET/migration-to-wicket-60.html Wicket] migration guide so you understand what has been changed.

As said, all of the resource management can now be done by Wicket. Rendering resource references was changed to Wickets approach in WiQuery 1.5 you can follow the [https://cwiki.apache.org/WICKET/migration-to-wicket-60.html Wicket] migration guide to see what you need to change in order to render resources.

The IWiQueryPlugin interface is now deprecated as users can now more easily render their statements in the Component#renderHead(..) function. This makes the interface rather useless. All code which you had in IWiQueryPlugin#statement() can be moved to the Component#renderHead(..) function. 

Here is a shortlist with the major classes and why they have been changed/removed.

IWiQueryPlugin: deprecated, use Component#renderHead(..) for both resources and statements.
WiQuerySettings: removed, no longer needed as all core resource management can now be done using Wickets Settings classes.
WiQueryDecoratingHeaderResponse: removed, no longer needed as plugins no longer need to implement an interface and there is no longer any setting to take into account.
IWiQueryInitializer: removed, no longer needed as there is no WiQuerySettings.
CoreJavaScriptResourceReference: removed, no longer needed as Wicket now has a reference to jQuery.
WiQueryJavaScriptResourceReference: removed, no longer needed as Wicket now has incorporated this into its ResourceReference.
WiQueryStyleSheetResourceReference: removed, no longer needed as Wicket now has incorporated this into its ResourceReference.

Our footprint has decreased considerably, both in LOC and performance. There is no need for a WiQueryDecoratingHeaderResponse, which was our biggest footprint performance wise.

Here are 2 snippets which explains the biggest change in WiQuery and Wicket:

WiQuery 1.5:
{{{
@Override
public void renderHead(IHeaderResponse response)
{
	response.renderJavaScriptReference(AccordionJavaScriptResourceReference.get());
}
	public JsStatement statement()
{
	return new JsQuery(this).$().chain("accordion", options.getJavaScriptOptions());
}
}}}

WiQuery 6.0.0:
{{{
@Override
public void renderHead(IHeaderResponse response)
{
	response.render(JavaScriptHeaderItem.render(ReferenceAccordionJavaScriptResourceReference.get()));
	response.render(OnDomReadyHeaderItem.forScript(new JsQuery(this).$().chain("accordion", options.getJavaScriptOptions()).render()));
}
}}}

WiQuery 1.5:
{{{
public class AccordionJavaScriptResourceReference extends WiQueryJavaScriptResourceReference
		implements ICoreUIJavaScriptResourceReference
{

...

	@Override
	public AbstractResourceDependentResourceReference[] getDependentResourceReferences()
	{
		AbstractResourceDependentResourceReference[] list =
			new AbstractResourceDependentResourceReference[2];
		list[0] = CoreUIJavaScriptResourceReference.get();
		list[1] = WidgetJavaScriptResourceReference.get();

		return list;
	}
}
}}}

WiQuery 6.0.0:
{{{
public class AccordionJavaScriptResourceReference extends JavaScriptResourceReference
{

...

	@Override
	public Iterable< ? extends HeaderItem> getDependencies()
	{
		return JavaScriptHeaderItems.forReferences(CoreUIJavaScriptResourceReference.get(),
			WidgetJavaScriptResourceReference.get());
	}
}
}}}
